import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public static void main(final String[] args) throws IOException {
        System.out.println("Please enter some text:");
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String text = in.readLine();

        String filteredText = removePunctuation(text);
        System.out.println("\nFiltered text: " + filteredText);

        String cipheredText = cipher(filteredText, 3);
        System.out.println("\nCiphered text: " + cipheredText);

        String outputText = formatBlocks(cipheredText, 5);
        System.out.println("\nOutput text: " + outputText);
    }

    public static String removePunctuation(final String in) {
        return in.replaceAll("[^a-zA-Z]", "");
    }

    public static String cipher(final String in, final int shift) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < in.length(); i++) {
            result.append(cipherChar(in.charAt(i), shift));
        }
        return result.toString();
    }

    public static String formatBlocks(final String in, final int blockSize) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < in.length(); i++) {
            if ((i > 0) && (i % blockSize == 0)) {
                result.append(' ');
            }
            result.append(Character.toUpperCase(in.charAt(i)));
        }
        int paddingLen = blockSize - (in.length() % blockSize);
        if (paddingLen < 5) {
            for (int i = 0; i < paddingLen; i++) {
                result.append('X');
            }
        }
        return result.toString();
    }

    private static char cipherChar(final char c, final int shift) {
        int base = Character.isLowerCase(c) ? 'a' : 'A';
        int newC = c - base;
        newC = (newC + shift) % 26;
        if (newC < 0) {
            newC += 26;
        }
        return (char) (newC + base);
    }
}
